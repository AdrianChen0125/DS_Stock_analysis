{
	"name": "ETL03_reddit",
	"properties": {
		"folder": {
			"name": "ETL"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spark0625",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "73a5429e-b40d-4d90-aad2-bb5aa9fc140f"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/ac86b402-22ae-4573-b51d-10b49ac53875/resourceGroups/ds_prj-l2zqv6g/providers/Microsoft.Synapse/workspaces/synapsel2zqv6g/bigDataPools/spark0625",
				"name": "spark0625",
				"type": "Spark",
				"endpoint": "https://synapsel2zqv6g.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spark0625",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# 03 Extract Comments from reddit "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.types import *\n",
					"from pyspark.sql import functions as f\n",
					"import requests\n",
					"import pandas as pd \n",
					"import datetime\n",
					"from notebookutils import mssparkutils"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# import raddit library\n",
					"try:\n",
					"    import praw\n",
					"except:\n",
					"    get_ipython().system('pip install praw')\n",
					"    import praw\n",
					"    \n",
					"from praw.models import MoreComments"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"source": [
					"# set up The Reddit Instance\n",
					"def set_up_reddit(secret):\n",
					"    user_agent='scraper 1.0 by /u/Adrian_10511'\n",
					"    reddit= praw.Reddit(\n",
					"        client_id='ZSsuFt18m9u6PnXJJwjF1A',\n",
					"        client_secret=secret,\n",
					"        user_agent = user_agent\n",
					"    )\n",
					"    return reddit\n",
					"    \n",
					"# set up query\n",
					"def search_post(query,reddit,subreddit='stocks',limit_=100):\n",
					"    search_query=query\n",
					"    subreddit_name = subreddit\n",
					"    results = reddit.subreddit(subreddit_name).search(search_query, limit=limit_)\n",
					"    \n",
					"    # change result into dataframe\n",
					"    data=[]\n",
					"    for submission in results:\n",
					"        data.append({\n",
					"            'Title': submission.title,\n",
					"            'Score': submission.score,\n",
					"            'ID': submission.id,\n",
					"            'URL': submission.url,\n",
					"            'Created': submission.created_utc,\n",
					"            'Number of Comments': submission.num_comments\n",
					"        })\n",
					"    post_df = pd.DataFrame(data)\n",
					"    post_df['Created'] = pd.to_datetime(post_df['Created'], unit='s')\n",
					"    return post_df\n",
					"\n",
					"def extract_comment(df,symbol,day=60):\n",
					"    end_date = datetime.datetime.now()\n",
					"    start_date = end_date-datetime.timedelta(days=day)\n",
					"    # Filter the post based on the date range\n",
					"    filtered_df = df[(df['Created'] >= start_date) & (df['Created'] <= end_date)].sort_values(by=['Created'],ascending=False)\n",
					"\n",
					"    # extract df \n",
					"    cmt_list=[]\n",
					"    for post_id in filtered_df['ID']:\n",
					"        for top_level_comment in reddit.submission(post_id).comments:\n",
					"            if isinstance(top_level_comment, MoreComments):\n",
					"                continue\n",
					"            cmt_list.append({\n",
					"                'created_utc':top_level_comment.created_utc,\n",
					"                'comment':top_level_comment.body\n",
					"                })\n",
					"            \n",
					"    # turn into dataframe \n",
					"    cmt_df = pd.DataFrame(cmt_list)\n",
					"    cmt_df['created_utc'] = pd.to_datetime(cmt_df['created_utc'], unit='s')\n",
					"    cmt_df['symbol']= symbol\n",
					"    sort_by_date = cmt_df.sort_values(by=['created_utc'],ascending=False).reset_index(drop=True)\n",
					"    \n",
					"    \n",
					"    return sort_by_date"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"source": [
					"if __name__ == \"__main__\":\n",
					"    # set up target ticker \n",
					"    symbol_list=['NVDA','AMD','INTC','QCOM','GOOG','MSFT','AMZN','AAPL']\n",
					"    apikey = mssparkutils.credentials.getSecret('synapse-key12345','reddit-key')\n",
					"    reddit = set_up_reddit(apikey)\n",
					"    list_cm  = [extract_comment(search_post(symbol,reddit),symbol) for symbol in symbol_list]\n",
					"    all_cm_df = pd.concat(list_cm)\n",
					"    all_cm_df['collectedAt']= datetime.datetime.now().date()\n",
					"\n",
					"    spark_df = spark.createDataFrame(all_cm_df)\n",
					"    datalake_nm = 'datalake'+mssparkutils.env.getWorkspaceName()[7:] # get datalake name \n",
					"    file_path ='abfss://files@{0}.dfs.core.windows.net/synapse/workspaces/data/reddit_cms'.format(datalake_nm)\n",
					"    spark_df.write.parquet(file_path,mode='overwrite')"
				],
				"execution_count": 5
			}
		]
	}
}